package pro.sky.java.coursework2.repository;

import org.springframework.stereotype.Repository;
import pro.sky.java.coursework2.exception.QuestionAlreadyAddedException;
import pro.sky.java.coursework2.exception.QuestionNotFoundException;
import pro.sky.java.coursework2.model.Question;

import javax.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

@Repository
public class JavaQuestionRepository implements QuestionRepository {
    private static final List<Question> questions = new ArrayList<>();

    @PostConstruct
    private void init() {
        add(new Question("В чем разница передачи параметров по ссылке и значению?",
                "В Java все аргументы метода передаются по значению, то есть копируется значение " +
                        "переменной (даже если она ссылочного типа). Однако у ссылочных переменных " +
                        "копируется лишь значение ссылки, а не объекта, на который она ссылается. " +
                        "Поэтому, если произойдет изменение состояния объекта, на который ссылается " +
                        "переданная ссылка, то эти изменения будут отражены на объекте, на который " +
                        "ссылается исходная переменная. Таким образом, то, что большинство людей " +
                        "называют \"передачей по ссылке\", на самом деле называется \"передачей значения ссылки\"."));
        add(new Question("Объекты каких стандартных классов immutable в Java?",
                "В языке Java объекты классов String, Integer, Byte, Character, Short, Boolean, " +
                        "Long, Double и Float являются immutable. Это означает, что значения их полей " +
                        "не могут быть изменены после создания объекта. Таким образом, любые операции с ними, " +
                        "которые изменяют значение, на самом деле создают новый объект. Примером может быть " +
                        "метод substring() в классе String, который создает новый объект строки, содержащий " +
                        "подстроку из исходной строки. Кроме того, вы также можете создавать свои собственные " +
                        "immutable классы в Java, объявляя поля и устанавливая им значения только в конструкторе, " +
                        "а затем делая их final. Это гарантирует, что их значения не могут быть изменены после " +
                        "создания объекта."));
        add(new Question("Что такое переопределение (override) метода?",
                "Переопределение метода (method overriding) в Java - это возможность заменить " +
                        "реализацию метода из базового класса (или интерфейса), который уже определен " +
                        "в производном классе, с тем же именем, списком аргументов и типом возвращаемого " +
                        "значения. Переопределение метода позволяет производному классу изменять поведение " +
                        "унаследованного метода без необходимости изменять его имя или сигнатуру."));
        add(new Question("Что такое abstract? Абстрактный класс? абстрактный метод?",
                "Ключевое слово \"abstract\" в Java используется для определения абстрактных классов " +
                        "и абстрактных методов.\n" +
                        "Абстрактный класс - это класс, который не может быть создан непосредственно экземпляром. " +
                        "Он служит только для описания интерфейса для классов-наследников. Абстрактный класс " +
                        "содержит хотя бы один абстрактный метод (метод без тела), который должен быть реализован " +
                        "в каждом классе-наследнике. Абстрактные классы могут также содержать обычные методы с " +
                        "конкретной реализацией.\n" +
                        "Абстрактный метод - это метод, который объявлен, но не реализован в абстрактном классе. " +
                        "Он не имеет тела и используется для определения сигнатуры метода и типа возвращаемого " +
                        "значения. Это означает, что любой класс, который наследует абстрактный класс, должен " +
                        "реализовать все его абстрактные методы, предоставляя свою собственную реализацию."));
        add(new Question("Что такое класс Assert? Зачем и как его использовать?",
                "Класс Assert - это класс в Java, который позволяет проверять утверждения (assertions) " +
                        "и генерировать ошибку AssertionError в случае нарушения этих утверждений.\n" +
                        "Assert используется для тестирования кода и обнаружения ошибок во время разработки " +
                        "приложений. Он предоставляет простой способ проверки соблюдения определенных правил " +
                        "и условий в вашем коде, что помогает отлавливать ошибки еще до запуска приложения."));
    }

    @Override
    public Question add(Question question) {
        if (questions.contains(question)) {
            throw new QuestionAlreadyAddedException();
        }
        questions.add(question);
        return question;
    }

    @Override
    public Question remove(Question question) {
        if (!questions.contains(question)) {
            throw new QuestionNotFoundException();
        }
        questions.remove(question);
        return question;
    }

    @Override
    public Collection<Question> getAll() {
        return Collections.unmodifiableList(questions);
    }
}
